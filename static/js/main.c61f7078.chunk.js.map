{"version":3,"sources":["components/control.js","pages/List.js","pages/Context.js","pages/Input.js","pages/TodoList.js","index.js"],"names":["Component","List","React","createContext","arr1","this","props","todos","filter","item","done","arr2","style","background","marginLeft","paddingLeft","paddingRight","borderRadius","length","renderTodos","Input","input","focus","htmlFor","ref","inp","value","inpValue","type","onChange","handleChange","id","placeholder","onClick","addTodo","TodoList","e","setState","target","state","title","alert","delTodo","idx","index","map","todo","toggle","checked","dangerouslySetInnerHTML","__html","newTodos","JSON","parse","stringify","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"gKA4CsBA,Y,eCIPC,GC9CCC,IAAMC,gB,uKD2Bd,IAAIC,EAAOC,KAAKC,MAAMC,MAAMC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,QAC9CC,EAAON,KAAKC,MAAMC,MAAMC,QAAO,SAAAC,GAAI,OAAKA,EAAKC,QACjD,OACI,yBAAKE,MAAO,CAACC,WAAW,cACpB,uDAAQ,0BAAMD,MAAO,CAACE,WAAW,GAAGC,YAAY,EAAEC,aAAa,EAAEH,WAAW,OAAOI,aAAa,QAASb,EAAKc,SAC9G,4BACIb,KAAKC,MAAMa,aAAY,IAG3B,uDAAQ,0BAAMP,MAAO,CAACE,WAAW,GAAGC,YAAY,EAAEC,aAAa,EAAEH,WAAW,OAAOI,aAAa,QAASN,EAAKO,SAC9G,4BACIb,KAAKC,MAAMa,aAAY,S,GArCxBnB,cEyBJoB,E,kLAtBPf,KAAKgB,MAAMC,U,+BAIL,IAAD,OAEL,OACA,yBAAKV,MAAO,CAACC,WAAW,cACpB,2BAAOU,QAAU,OAAjB,YACA,2BAAOC,IAAK,SAAAC,GAAG,OAAE,EAAKJ,MAAMI,GAC5BC,MAAOrB,KAAKC,MAAMqB,SAClBC,KAAK,OACLC,SAAUxB,KAAKC,MAAMwB,aACrBC,GAAK,MACLC,YAAc,6BAEd,4BAAQC,QAAS5B,KAAKC,MAAM4B,SAA5B,qB,GAnBQlC,aC0FLmC,E,kDAxFX,aAAc,IAAD,8BACT,gBAQJL,aAAa,SAACM,GACV,EAAKC,SAAS,CAACV,SAASS,EAAEE,OAAOZ,SAVxB,EA8BbQ,QAAQ,WACA,EAAKK,MAAMZ,UACV,EAAKU,SAAS,CACV9B,MAAM,CACF,CACIiC,MAAM,EAAKD,MAAMZ,SACjBjB,MAAK,IAHR,mBAKE,EAAK6B,MAAMhC,UAGtB,EAAK8B,SAAS,CAACV,SAAS,MAExBc,MAAM,6BA3CF,EAgDbC,QAAQ,SAACC,GACL,EAAKN,SAAS,CACV9B,MAAM,EAAKgC,MAAMhC,MAAMC,QAAO,SAACC,EAAKmC,GAAN,OAAcA,IAAUD,QAlDjD,EAuDbxB,YAAY,SAACT,GACT,OAAQ,EAAK6B,MAAMhC,MAAMsC,KAAI,SAACC,EAAKH,GAClC,GAAGjC,GAAQoC,EAAKpC,KACZ,OAAO,4BACP,2BAAOuB,QAAS,kBAAI,EAAKc,OAAOJ,IAAMK,QAAStC,EAAMkB,KAAK,aAC1D,0BAAMqB,wBAA2B,CAACC,OAAOJ,EAAKN,SAC9C,4BAAQP,QAAS,kBAAI,EAAKS,QAAQC,KAAlC,qBA7DI,EAoEbI,OAAO,SAACJ,GACJ,IAAIQ,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKf,MAAMhC,QACpD4C,EAASR,GAAKjC,MAAMyC,EAASR,GAAKjC,KAClC,EAAK2B,SAAS,CACb9B,MAAM4C,KAtEP,EAAKZ,MAAM,CACPZ,SAAS,GACTpB,MAAM,IAJD,E,gEAcT,IAAIA,EAAQgD,aAAaC,QAAQ,SAC9BjD,GACCF,KAAKgC,SAAS,CACV9B,MAAM6C,KAAKC,MAAM9C,O,2CAMzBgD,aAAaE,QACT,QACAL,KAAKE,UAAUjD,KAAKkC,MAAMhC,U,+BAsD9B,OACI,6BACI,kBAAC,EAAD,CAAO2B,QAAW7B,KAAK6B,QAASJ,aAAgBzB,KAAKyB,aAAcH,SAAUtB,KAAKkC,MAAMZ,SAAUpB,MAAOF,KAAKkC,MAAMhC,QACpH,kBAAC,EAAD,CAAMY,YAAed,KAAKc,YAAauB,QAAWrC,KAAKqC,QAASf,SAAUtB,KAAKkC,MAAMZ,SAAUpB,MAAOF,KAAKkC,MAAMhC,a,GAnF1GL,IAAMF,WCW7B0D,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.c61f7078.chunk.js","sourcesContent":["// import React, { Component } from 'react'\r\n\r\n//  class Control extends Component {\r\n//     constructor(){\r\n//          super();\r\n//          this.state={\r\n//              inpValue:''\r\n//          }\r\n//      }\r\n//     handleChange=(e)=>{\r\n//          this.setState({inpValue:e.target.value})\r\n//      }\r\n\r\n//     componentDidMount(){\r\n//          this.input.focus();\r\n//      }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <input \r\n//                 ref={inp=>this.input=inp} \r\n//                 value={this.state.inpValue} \r\n//                 type='text' \r\n//                 onChange={this.handleChange}\r\n//                 />\r\n                \r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default Control;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\n\r\n//组件名首字母大写\r\nclass Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:'',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:true},\r\n                {title:'3',done:false},\r\n                {title:'4',done:true},\r\n             ]\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.input.focus();//默认焦点\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo=()=>{\r\n    //    this.state.todos.push({title:this.state.inpValue})\r\n    //    this.setState({\r\n    //        todos:this.state.todos\r\n    //     })\r\n        if(this.state.inpValue){\r\n            this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inpValue,\r\n                        done:true\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n            this.setState({inpValue:''})\r\n        }else{\r\n            alert(\"不能为空\");\r\n        }\r\n    }\r\n    delTodo=(idx)=>{\r\n        //    let newTodos = JSON.parse(JSON.stringify(this.state.tsodos)) //深拷贝\r\n        //    newTodos.splice(idx,1);\r\n        //    this.setState({todos:newTodos})\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index != idx)\r\n        }\r\n   )}\r\n   renderTodos=(done)=>{\r\n       return  this.state.todos.map((todo,idx)=>{\r\n        if(done == todo.done){\r\n            return <li>\r\n            <input onClick={()=>this.toggle(idx)} checked={done} type='checkbox'/>\r\n            <span dangerouslySetInnerHTML = {{__html:todo.title}}>\r\n                {/* {todo.title} */}\r\n            </span>\r\n            <button onClick={()=>this.delTodo(idx)}>删除</button>\r\n        </li>\r\n        }\r\n     })\r\n   }\r\n   toggle=(idx)=>{\r\n       let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n       newTodos[idx].done=!newTodos[idx].done;\r\n       this.setState({\r\n        todos:newTodos\r\n       })\r\n   }\r\n\r\n    render() {\r\n        const {todos,inpValue}=this.state;\r\n        let arr1 = todos.filter(item => !!item.done);\r\n            return (\r\n                <div style={{background:'lightgray'}}>\r\n                    <lable htmlFor = \"inp\">todoList</lable>\r\n                    <input \r\n                    ref={inp=>this.input=inp} \r\n                    value={inpValue} \r\n                    type='text' \r\n                    onChange={this.handleChange}\r\n                    id = 'inp'\r\n                    />\r\n                    <button onClick={this.addTodo}>添加</button>\r\n            <h2>正在进行{arr1.length}</h2>\r\n                    <ul>{\r\n                        this.renderTodos(true)\r\n                    }\r\n                    </ul>\r\n                    <h2>已经完成</h2>\r\n                    <ul style={{color:'red'}}>{\r\n                        this.renderTodos(false)\r\n                    }\r\n                    </ul>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Control;\r\n\r\n\r\n\r\n// input加value就变成受控组件,所以通过状态更新","import React,{Component} from 'react';\r\nimport Context from './Context';\r\n\r\nclass List extends Component{\r\n\r\n\r\n    // renderTodos=(done)=>{\r\n    //     return  this.props.todos.map((todo,idx)=>{\r\n    //      if(done == todo.done){\r\n    //          return <li>\r\n    //          <input onClick={()=>this.toggle(idx)} checked={done} type='checkbox'/>\r\n    //          <span dangerouslySetInnerHTML = {{__html:todo.title}}></span>\r\n    //          <button onClick={()=>this.props.delTodo(idx)}>删除</button>\r\n    //      </li>\r\n    //      }\r\n    //   })\r\n    // }\r\n\r\n    // toggle=(idx)=>{\r\n    //     let newTodos = JSON.parse(JSON.stringify(this.props.todos))\r\n    //     newTodos[idx].done=!newTodos[idx].done;\r\n    //     this.setState({\r\n    //      todos:newTodos\r\n    //     })\r\n    // }\r\n    \r\n    render(){\r\n        // console.log(this.props.todos);\r\n        // console.log(this.props.arr1);\r\n        let arr1 = this.props.todos.filter(item => !!item.done);\r\n        let arr2 = this.props.todos.filter(item => !item.done);\r\n        return(\r\n            <div style={{background:'lightgray'}}>\r\n                <h2>正在进行<span style={{marginLeft:10,paddingLeft:8,paddingRight:8,background:\"#f77\",borderRadius:\"50%\"}}>{arr1.length}</span></h2>\r\n                <ul>{\r\n                    this.props.renderTodos(true)\r\n                }\r\n                </ul>\r\n                <h2>已经完成<span style={{marginLeft:10,paddingLeft:8,paddingRight:8,background:\"#7f7\",borderRadius:\"50%\"}}>{arr2.length}</span></h2>\r\n                <ul >{\r\n                    this.props.renderTodos(false)\r\n                }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React,{Component} from 'react';\r\nimport TodoList from './TodoList';\r\n\r\nclass Input extends Component{\r\n\r\n    componentDidMount(){\r\n        this.input.focus();//默认焦点\r\n    }\r\n    \r\n\r\n    render (){\r\n        // console.log(this.props.inpValue);\r\n        return(\r\n        <div style={{background:'lightgray'}}>\r\n            <lable htmlFor = \"inp\">todoList</lable>\r\n            <input ref={inp=>this.input=inp} \r\n            value={this.props.inpValue} \r\n            type='text' \r\n            onChange={this.props.handleChange}\r\n            id = 'inp'\r\n            placeholder = '在此输入'/>\r\n\r\n            <button onClick={this.props.addTodo}>添加</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport List from './List';\r\nimport Input from './Input';\r\n\r\nclass TodoList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:'',\r\n            todos:[]\r\n        }\r\n    }\r\n\r\n    //文本获取\r\n    handleChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos),\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    //点击添加\r\n    addTodo=()=>{\r\n         if(this.state.inpValue){\r\n             this.setState({\r\n                 todos:[\r\n                     {\r\n                         title:this.state.inpValue,\r\n                         done:true\r\n                     },\r\n                     ...this.state.todos\r\n                 ]\r\n             });\r\n             this.setState({inpValue:''});//自动清除\r\n         }else{\r\n             alert(\"不能为空\");\r\n         }\r\n     }\r\n\r\n    //点击删除\r\n    delTodo=(idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index !== idx)\r\n        }\r\n    )}\r\n\r\n    //列表\r\n    renderTodos=(done)=>{\r\n        return  this.state.todos.map((todo,idx)=>{\r\n         if(done == todo.done){\r\n             return <li>\r\n             <input onClick={()=>this.toggle(idx)} checked={done} type='checkbox'/>\r\n             <span dangerouslySetInnerHTML = {{__html:todo.title}}></span>\r\n             <button onClick={()=>this.delTodo(idx)}>删除</button>\r\n         </li>\r\n         }\r\n      })\r\n    }\r\n\r\n    //TF转换\r\n    toggle=(idx)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[idx].done=!newTodos[idx].done;\r\n        this.setState({\r\n         todos:newTodos\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // let arr1 = this.state.todos.filter(item => !!item.done);\r\n        // let arr2 = this.state.todos.filter(item => !item.done);\r\n        return (\r\n            <div>\r\n                <Input addTodo = {this.addTodo} handleChange = {this.handleChange} inpValue={this.state.inpValue} todos={this.state.todos}/>\r\n                <List renderTodos = {this.renderTodos} delTodo = {this.delTodo} inpValue={this.state.inpValue} todos={this.state.todos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import Control from './components/control';\n// import Home from './pages/Home';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import Hoc,{Detail} from './pages/Hoc';\n// import Hook from './pages/Hook';\n// // import $ from 'jquery';\n// import Demo01 from './pages/Demo01';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './pages/App';\nimport TodoList from './pages/TodoList';\nimport List from './pages/List';\n// var TodoList = require('./pages/TodoList');\n\nReactDOM.render(\n  <TodoList />,\n  // <Control/>,\n  document.getElementById('root')\n);\n// ReactDOM.render(\n//   <Control />,\n//   document.getElementById('root')\n// );\n\n\n// ReactDOM.render(\n//   <Context.Provider value='133'> \n//     {/* <Hook /> */}\n//     <App/>\n//   </Context.Provider>,\n//   document.getElementById('root')\n// );\n\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'react'\n//   );\n// ReactDOM.render(\n//   ele,\n//   document.getElementById('root')\n// );\n\n\n\n// let ele = <h1 id = \"title\" className = 'tit'>\n//   <div>hello</div>\n//   react\n// </h1>;\n\n\n// setInterval(() => {\n//   let ele = <h1 id='time' className='ti'>\n//   <div>当前时间</div>\n//   {new Date().toLocaleString()}\n//   </h1>\n//   ReactDOM.render(\n//     ele,\n//     document.getElementById('root')\n//   )\n// }, 1000);\n\n\n\n//函数组件   UI（展示）组件，木偶组件         \n// function App(props){\n//   return <div>\n//     <div>{props.title}</div>\n//     <div>world</div>\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title=\"任意值\"/>,\n//   document.getElementById('root')\n// );\n// 除此，还有智能组件\n// class Demo extends React.Component{\n//     constructor(){\n//       super();\n//       this.state={\n//       name:'Tom'\n//     };\n//     setTimeout(()=>{\n//       this.setState({name:'Jerry'})\n//     },3000)\n//   }   \n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name}/>\n//     </div>\n//   }\n// }\n// ReactDOM.render(\n//   <Demo title=\"任意值\"/>,\n//   document.getElementById('root')\n// );\n\n//无react-dom如何实现\n/*let ReactDOM = {\n  render(eleObj,container){\n    //解构\n    const {type,props} = eleObj;\n    //创建第一层节点\n    let ele = document.createElement(type);\n    //遍历属性对象，降属性添加到第一层节点对象上\n    for(const prop in props){\n      if(prop == 'children'){\n        if(typeof props.children == 'string'){\n          const txtNode = document.createTextNode(props.children);\n          ele.appendChild(txtNode);\n          continue;\n        }\n        //将第一层节点对象的子元素添加进去\n        props.children.forEach((child)=>{\n          if(typeof child == 'string'){\n            const txtNode = document.createTextNode(child);\n            ele.appendChild(txtNode);\n          }else{\n            ReactDOM.render(child,ele);\n          }\n        })\n      }else{\n        // ele.setAttribute('class',props[prop]);\n        ele[prop] = props[prop];\n      }\n    }\n    //将第一层DOM添加进\n    container.appendChild(ele);\n  }\n}*/\n// ReactDOM.render(\n//   ele,\n//   document.getElementById('root')\n// );\n\n\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state={\n//       data:[1,2,3]\n//     }\n//     setTimeout(()=>{\n//       this.setState({data:[4,5,6]})\n//     },2000)\n//   }\n//   render(){\n//     return <ul>\n//       {\n//         this.state.data.map(\n//           (item)=><li key={item.id}>{item}</li>\n//           )\n//       }\n//     </ul>\n//   }\n// }\n// ReactDOM.render(\n//   <Home title=\"任意值\"/>,\n//   document.getElementById('root')\n// );\n\n\n\n/*const List = (props)=>{\n  \n  return <ul>\n    {\n    props.data.map(\n      (item) => <li>{item.title}</li>\n      )\n    }\n  </ul>\n}\n\n\n\nconst Button = ()=>{\n  const btns = [1,2,3,4,5];\n  const handleClick = (num)=>{\n    //事件对象\n    console.log(num);\n  }\n  \n  return <div>\n    {\n      btns.map(\n        (item)=>(\n        <button key={item} onClick={()=>handleClick(item)}>\n          {item}\n        </button>)\n      )\n    }\n    { <List data={data}/> }\n  </div>\n  \n}\n\n\n*/\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state={\n//       data:[]\n//     }\n//   }\n  // componentDidMount(){\n  //   fetch('https://cnodejs.org/api/v1/topics')\n  //   .then(res=>res.json())\n  //   .then(({data})=>{//data解构\n  //     console.log(data);\n  //     this.setState({data});\n  //   })\n  // }\n  \n  \n  // handleClick=()=>{\n  //   console.log(this);\n  // }\n\n//   render(){\n//     const {data} = this.state;//data 代替this.state\n//     return <ul>\n//       {\n//         <button onClick={()=>{console.log('1')}}>click</button>,\n//         this.state.data.map(\n//           (item)=><li key = {item.id}>{item.title}</li>\n//           )\n//       }\n//     </ul>\n//   }\n// }\n// ReactDOM.render(\n//   <Home title=\"任意值\"/>,\n//   document.getElementById('root')\n// );\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}